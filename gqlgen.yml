# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - internal/pkg/graph/*.graphqls

# Where should the generated server code go?
exec:
  filename: internal/pkg/graph/generated/generated.go
  package: generated

# Uncomment to enable federation
# federation:
#   filename: graph/generated/federation.go
#   package: generated

# Where should any generated models go?
model:
  filename: internal/pkg/graph/model/models_gen.go
  package: model

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: internal/pkg/graph
  package: graph

# Optional: turn on use `gqlgen:"fieldName"` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
  - "github.com/pepsighan/graftini_backend/internal/pkg/graph/model"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  ID:
    model: github.com/pepsighan/graftini_backend/internal/backend/gqlgen.UUID
  Int:
    model: github.com/99designs/gqlgen/graphql.Int
  User:
    model: github.com/pepsighan/graftini_backend/internal/pkg/ent.User
  Project:
    model: github.com/pepsighan/graftini_backend/internal/pkg/ent.Project
  Page:
    model: github.com/pepsighan/graftini_backend/internal/pkg/ent.Page
  Deployment:
    model: github.com/pepsighan/graftini_backend/internal/pkg/ent.Deployment
  GraphQLQuery:
    model: github.com/pepsighan/graftini_backend/internal/pkg/ent.GraphQLQuery
