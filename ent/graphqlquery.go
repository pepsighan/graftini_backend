// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/pepsighan/nocodepress_backend/ent/graphqlquery"
	"github.com/pepsighan/nocodepress_backend/ent/project"
)

// GraphQLQuery is the model entity for the GraphQLQuery schema.
type GraphQLQuery struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// VariableName holds the value of the "variableName" field.
	VariableName string `json:"variableName,omitempty"`
	// GqlAst holds the value of the "gqlAst" field.
	GqlAst string `json:"gqlAst,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GraphQLQueryQuery when eager-loading is set.
	Edges           GraphQLQueryEdges `json:"edges"`
	project_queries *uuid.UUID
}

// GraphQLQueryEdges holds the relations/edges for other nodes in the graph.
type GraphQLQueryEdges struct {
	// QueryOf holds the value of the queryOf edge.
	QueryOf *Project `json:"queryOf,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// QueryOfOrErr returns the QueryOf value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GraphQLQueryEdges) QueryOfOrErr() (*Project, error) {
	if e.loadedTypes[0] {
		if e.QueryOf == nil {
			// The edge queryOf was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.QueryOf, nil
	}
	return nil, &NotLoadedError{edge: "queryOf"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GraphQLQuery) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case graphqlquery.FieldVariableName, graphqlquery.FieldGqlAst:
			values[i] = new(sql.NullString)
		case graphqlquery.FieldCreatedAt, graphqlquery.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case graphqlquery.FieldID:
			values[i] = new(uuid.UUID)
		case graphqlquery.ForeignKeys[0]: // project_queries
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GraphQLQuery", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GraphQLQuery fields.
func (gqq *GraphQLQuery) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case graphqlquery.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				gqq.ID = *value
			}
		case graphqlquery.FieldVariableName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field variableName", values[i])
			} else if value.Valid {
				gqq.VariableName = value.String
			}
		case graphqlquery.FieldGqlAst:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gqlAst", values[i])
			} else if value.Valid {
				gqq.GqlAst = value.String
			}
		case graphqlquery.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gqq.CreatedAt = value.Time
			}
		case graphqlquery.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gqq.UpdatedAt = value.Time
			}
		case graphqlquery.ForeignKeys[0]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field project_queries", values[i])
			} else if value != nil {
				gqq.project_queries = value
			}
		}
	}
	return nil
}

// QueryQueryOf queries the "queryOf" edge of the GraphQLQuery entity.
func (gqq *GraphQLQuery) QueryQueryOf() *ProjectQuery {
	return (&GraphQLQueryClient{config: gqq.config}).QueryQueryOf(gqq)
}

// Update returns a builder for updating this GraphQLQuery.
// Note that you need to call GraphQLQuery.Unwrap() before calling this method if this GraphQLQuery
// was returned from a transaction, and the transaction was committed or rolled back.
func (gqq *GraphQLQuery) Update() *GraphQLQueryUpdateOne {
	return (&GraphQLQueryClient{config: gqq.config}).UpdateOne(gqq)
}

// Unwrap unwraps the GraphQLQuery entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gqq *GraphQLQuery) Unwrap() *GraphQLQuery {
	tx, ok := gqq.config.driver.(*txDriver)
	if !ok {
		panic("ent: GraphQLQuery is not a transactional entity")
	}
	gqq.config.driver = tx.drv
	return gqq
}

// String implements the fmt.Stringer.
func (gqq *GraphQLQuery) String() string {
	var builder strings.Builder
	builder.WriteString("GraphQLQuery(")
	builder.WriteString(fmt.Sprintf("id=%v", gqq.ID))
	builder.WriteString(", variableName=")
	builder.WriteString(gqq.VariableName)
	builder.WriteString(", gqlAst=")
	builder.WriteString(gqq.GqlAst)
	builder.WriteString(", created_at=")
	builder.WriteString(gqq.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(gqq.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// GraphQLQueries is a parsable slice of GraphQLQuery.
type GraphQLQueries []*GraphQLQuery

func (gqq GraphQLQueries) config(cfg config) {
	for _i := range gqq {
		gqq[_i].config = cfg
	}
}
