// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
	"github.com/pepsighan/nocodepress_backend/ent/graphqlquery"
	"github.com/pepsighan/nocodepress_backend/ent/page"
	"github.com/pepsighan/nocodepress_backend/ent/project"
	"github.com/pepsighan/nocodepress_backend/ent/schema"
	"github.com/pepsighan/nocodepress_backend/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	graphqlqueryFields := schema.GraphQLQuery{}.Fields()
	_ = graphqlqueryFields
	// graphqlqueryDescCreatedAt is the schema descriptor for created_at field.
	graphqlqueryDescCreatedAt := graphqlqueryFields[3].Descriptor()
	// graphqlquery.DefaultCreatedAt holds the default value on creation for the created_at field.
	graphqlquery.DefaultCreatedAt = graphqlqueryDescCreatedAt.Default.(func() time.Time)
	// graphqlqueryDescUpdatedAt is the schema descriptor for updated_at field.
	graphqlqueryDescUpdatedAt := graphqlqueryFields[4].Descriptor()
	// graphqlquery.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	graphqlquery.DefaultUpdatedAt = graphqlqueryDescUpdatedAt.Default.(func() time.Time)
	// graphqlquery.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	graphqlquery.UpdateDefaultUpdatedAt = graphqlqueryDescUpdatedAt.UpdateDefault.(func() time.Time)
	// graphqlqueryDescID is the schema descriptor for id field.
	graphqlqueryDescID := graphqlqueryFields[0].Descriptor()
	// graphqlquery.DefaultID holds the default value on creation for the id field.
	graphqlquery.DefaultID = graphqlqueryDescID.Default.(func() uuid.UUID)
	pageFields := schema.Page{}.Fields()
	_ = pageFields
	// pageDescID is the schema descriptor for id field.
	pageDescID := pageFields[0].Descriptor()
	// page.DefaultID holds the default value on creation for the id field.
	page.DefaultID = pageDescID.Default.(func() uuid.UUID)
	projectFields := schema.Project{}.Fields()
	_ = projectFields
	// projectDescCreatedAt is the schema descriptor for created_at field.
	projectDescCreatedAt := projectFields[3].Descriptor()
	// project.DefaultCreatedAt holds the default value on creation for the created_at field.
	project.DefaultCreatedAt = projectDescCreatedAt.Default.(func() time.Time)
	// projectDescUpdatedAt is the schema descriptor for updated_at field.
	projectDescUpdatedAt := projectFields[4].Descriptor()
	// project.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	project.DefaultUpdatedAt = projectDescUpdatedAt.Default.(func() time.Time)
	// project.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	project.UpdateDefaultUpdatedAt = projectDescUpdatedAt.UpdateDefault.(func() time.Time)
	// projectDescID is the schema descriptor for id field.
	projectDescID := projectFields[0].Descriptor()
	// project.DefaultID holds the default value on creation for the id field.
	project.DefaultID = projectDescID.Default.(func() uuid.UUID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[5].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[6].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
