// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/pepsighan/graftini_backend/ent/graphqlquery"
	"github.com/pepsighan/graftini_backend/ent/project"
)

// GraphQLQueryCreate is the builder for creating a GraphQLQuery entity.
type GraphQLQueryCreate struct {
	config
	mutation *GraphQLQueryMutation
	hooks    []Hook
}

// SetVariableName sets the "variableName" field.
func (gqqc *GraphQLQueryCreate) SetVariableName(s string) *GraphQLQueryCreate {
	gqqc.mutation.SetVariableName(s)
	return gqqc
}

// SetGqlAst sets the "gqlAst" field.
func (gqqc *GraphQLQueryCreate) SetGqlAst(s string) *GraphQLQueryCreate {
	gqqc.mutation.SetGqlAst(s)
	return gqqc
}

// SetCreatedAt sets the "created_at" field.
func (gqqc *GraphQLQueryCreate) SetCreatedAt(t time.Time) *GraphQLQueryCreate {
	gqqc.mutation.SetCreatedAt(t)
	return gqqc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gqqc *GraphQLQueryCreate) SetNillableCreatedAt(t *time.Time) *GraphQLQueryCreate {
	if t != nil {
		gqqc.SetCreatedAt(*t)
	}
	return gqqc
}

// SetUpdatedAt sets the "updated_at" field.
func (gqqc *GraphQLQueryCreate) SetUpdatedAt(t time.Time) *GraphQLQueryCreate {
	gqqc.mutation.SetUpdatedAt(t)
	return gqqc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gqqc *GraphQLQueryCreate) SetNillableUpdatedAt(t *time.Time) *GraphQLQueryCreate {
	if t != nil {
		gqqc.SetUpdatedAt(*t)
	}
	return gqqc
}

// SetID sets the "id" field.
func (gqqc *GraphQLQueryCreate) SetID(u uuid.UUID) *GraphQLQueryCreate {
	gqqc.mutation.SetID(u)
	return gqqc
}

// SetQueryOfID sets the "queryOf" edge to the Project entity by ID.
func (gqqc *GraphQLQueryCreate) SetQueryOfID(id uuid.UUID) *GraphQLQueryCreate {
	gqqc.mutation.SetQueryOfID(id)
	return gqqc
}

// SetNillableQueryOfID sets the "queryOf" edge to the Project entity by ID if the given value is not nil.
func (gqqc *GraphQLQueryCreate) SetNillableQueryOfID(id *uuid.UUID) *GraphQLQueryCreate {
	if id != nil {
		gqqc = gqqc.SetQueryOfID(*id)
	}
	return gqqc
}

// SetQueryOf sets the "queryOf" edge to the Project entity.
func (gqqc *GraphQLQueryCreate) SetQueryOf(p *Project) *GraphQLQueryCreate {
	return gqqc.SetQueryOfID(p.ID)
}

// Mutation returns the GraphQLQueryMutation object of the builder.
func (gqqc *GraphQLQueryCreate) Mutation() *GraphQLQueryMutation {
	return gqqc.mutation
}

// Save creates the GraphQLQuery in the database.
func (gqqc *GraphQLQueryCreate) Save(ctx context.Context) (*GraphQLQuery, error) {
	var (
		err  error
		node *GraphQLQuery
	)
	gqqc.defaults()
	if len(gqqc.hooks) == 0 {
		if err = gqqc.check(); err != nil {
			return nil, err
		}
		node, err = gqqc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GraphQLQueryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gqqc.check(); err != nil {
				return nil, err
			}
			gqqc.mutation = mutation
			node, err = gqqc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gqqc.hooks) - 1; i >= 0; i-- {
			mut = gqqc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gqqc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gqqc *GraphQLQueryCreate) SaveX(ctx context.Context) *GraphQLQuery {
	v, err := gqqc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (gqqc *GraphQLQueryCreate) defaults() {
	if _, ok := gqqc.mutation.CreatedAt(); !ok {
		v := graphqlquery.DefaultCreatedAt()
		gqqc.mutation.SetCreatedAt(v)
	}
	if _, ok := gqqc.mutation.UpdatedAt(); !ok {
		v := graphqlquery.DefaultUpdatedAt()
		gqqc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gqqc.mutation.ID(); !ok {
		v := graphqlquery.DefaultID()
		gqqc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gqqc *GraphQLQueryCreate) check() error {
	if _, ok := gqqc.mutation.VariableName(); !ok {
		return &ValidationError{Name: "variableName", err: errors.New("ent: missing required field \"variableName\"")}
	}
	if _, ok := gqqc.mutation.GqlAst(); !ok {
		return &ValidationError{Name: "gqlAst", err: errors.New("ent: missing required field \"gqlAst\"")}
	}
	if _, ok := gqqc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := gqqc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	return nil
}

func (gqqc *GraphQLQueryCreate) sqlSave(ctx context.Context) (*GraphQLQuery, error) {
	_node, _spec := gqqc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gqqc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (gqqc *GraphQLQueryCreate) createSpec() (*GraphQLQuery, *sqlgraph.CreateSpec) {
	var (
		_node = &GraphQLQuery{config: gqqc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: graphqlquery.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: graphqlquery.FieldID,
			},
		}
	)
	if id, ok := gqqc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gqqc.mutation.VariableName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: graphqlquery.FieldVariableName,
		})
		_node.VariableName = value
	}
	if value, ok := gqqc.mutation.GqlAst(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: graphqlquery.FieldGqlAst,
		})
		_node.GqlAst = value
	}
	if value, ok := gqqc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: graphqlquery.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := gqqc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: graphqlquery.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := gqqc.mutation.QueryOfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   graphqlquery.QueryOfTable,
			Columns: []string{graphqlquery.QueryOfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_queries = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GraphQLQueryCreateBulk is the builder for creating many GraphQLQuery entities in bulk.
type GraphQLQueryCreateBulk struct {
	config
	builders []*GraphQLQueryCreate
}

// Save creates the GraphQLQuery entities in the database.
func (gqqcb *GraphQLQueryCreateBulk) Save(ctx context.Context) ([]*GraphQLQuery, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gqqcb.builders))
	nodes := make([]*GraphQLQuery, len(gqqcb.builders))
	mutators := make([]Mutator, len(gqqcb.builders))
	for i := range gqqcb.builders {
		func(i int, root context.Context) {
			builder := gqqcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GraphQLQueryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gqqcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gqqcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gqqcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gqqcb *GraphQLQueryCreateBulk) SaveX(ctx context.Context) []*GraphQLQuery {
	v, err := gqqcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
