// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// DeploymentsColumns holds the columns for the "deployments" table.
	DeploymentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "vercel_deployment_id", Type: field.TypeString, Default: ""},
		{Name: "status", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Default: "CURRENT_TIMESTAMP"},
		{Name: "updated_at", Type: field.TypeTime, Default: "CURRENT_TIMESTAMP"},
		{Name: "project_deployments", Type: field.TypeUUID, Nullable: true},
	}
	// DeploymentsTable holds the schema information for the "deployments" table.
	DeploymentsTable = &schema.Table{
		Name:       "deployments",
		Columns:    DeploymentsColumns,
		PrimaryKey: []*schema.Column{DeploymentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "deployments_projects_deployments",
				Columns:    []*schema.Column{DeploymentsColumns[5]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// GraphQlQueriesColumns holds the columns for the "graph_ql_queries" table.
	GraphQlQueriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "variable_name", Type: field.TypeString},
		{Name: "gql_ast", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "project_queries", Type: field.TypeUUID, Nullable: true},
	}
	// GraphQlQueriesTable holds the schema information for the "graph_ql_queries" table.
	GraphQlQueriesTable = &schema.Table{
		Name:       "graph_ql_queries",
		Columns:    GraphQlQueriesColumns,
		PrimaryKey: []*schema.Column{GraphQlQueriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "graph_ql_queries_projects_queries",
				Columns:    []*schema.Column{GraphQlQueriesColumns[5]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PagesColumns holds the columns for the "pages" table.
	PagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "route", Type: field.TypeString},
		{Name: "component_map", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime, Default: "CURRENT_TIMESTAMP"},
		{Name: "updated_at", Type: field.TypeTime, Default: "CURRENT_TIMESTAMP"},
		{Name: "project_pages", Type: field.TypeUUID, Nullable: true},
	}
	// PagesTable holds the schema information for the "pages" table.
	PagesTable = &schema.Table{
		Name:       "pages",
		Columns:    PagesColumns,
		PrimaryKey: []*schema.Column{PagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "pages_projects_pages",
				Columns:    []*schema.Column{PagesColumns[6]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProjectsColumns holds the columns for the "projects" table.
	ProjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "ref_id", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "graphql_endpoint", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_projects", Type: field.TypeUUID, Nullable: true},
	}
	// ProjectsTable holds the schema information for the "projects" table.
	ProjectsTable = &schema.Table{
		Name:       "projects",
		Columns:    ProjectsColumns,
		PrimaryKey: []*schema.Column{ProjectsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "projects_users_projects",
				Columns:    []*schema.Column{ProjectsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "firebase_uid", Type: field.TypeString, Unique: true},
		{Name: "first_name", Type: field.TypeString, Nullable: true},
		{Name: "last_name", Type: field.TypeString, Nullable: true},
		{Name: "email", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:        "users",
		Columns:     UsersColumns,
		PrimaryKey:  []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		DeploymentsTable,
		GraphQlQueriesTable,
		PagesTable,
		ProjectsTable,
		UsersTable,
	}
)

func init() {
	DeploymentsTable.ForeignKeys[0].RefTable = ProjectsTable
	GraphQlQueriesTable.ForeignKeys[0].RefTable = ProjectsTable
	PagesTable.ForeignKeys[0].RefTable = ProjectsTable
	ProjectsTable.ForeignKeys[0].RefTable = UsersTable
}
