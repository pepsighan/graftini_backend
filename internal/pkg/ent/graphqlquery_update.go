// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/pepsighan/graftini_backend/internal/pkg/ent/graphqlquery"
	"github.com/pepsighan/graftini_backend/internal/pkg/ent/predicate"
	"github.com/pepsighan/graftini_backend/internal/pkg/ent/project"
)

// GraphQLQueryUpdate is the builder for updating GraphQLQuery entities.
type GraphQLQueryUpdate struct {
	config
	hooks    []Hook
	mutation *GraphQLQueryMutation
}

// Where adds a new predicate for the GraphQLQueryUpdate builder.
func (gqqu *GraphQLQueryUpdate) Where(ps ...predicate.GraphQLQuery) *GraphQLQueryUpdate {
	gqqu.mutation.predicates = append(gqqu.mutation.predicates, ps...)
	return gqqu
}

// SetVariableName sets the "variable_name" field.
func (gqqu *GraphQLQueryUpdate) SetVariableName(s string) *GraphQLQueryUpdate {
	gqqu.mutation.SetVariableName(s)
	return gqqu
}

// SetGqlAst sets the "gql_ast" field.
func (gqqu *GraphQLQueryUpdate) SetGqlAst(s string) *GraphQLQueryUpdate {
	gqqu.mutation.SetGqlAst(s)
	return gqqu
}

// SetUpdatedAt sets the "updated_at" field.
func (gqqu *GraphQLQueryUpdate) SetUpdatedAt(t time.Time) *GraphQLQueryUpdate {
	gqqu.mutation.SetUpdatedAt(t)
	return gqqu
}

// SetQueryOfID sets the "query_of" edge to the Project entity by ID.
func (gqqu *GraphQLQueryUpdate) SetQueryOfID(id uuid.UUID) *GraphQLQueryUpdate {
	gqqu.mutation.SetQueryOfID(id)
	return gqqu
}

// SetNillableQueryOfID sets the "query_of" edge to the Project entity by ID if the given value is not nil.
func (gqqu *GraphQLQueryUpdate) SetNillableQueryOfID(id *uuid.UUID) *GraphQLQueryUpdate {
	if id != nil {
		gqqu = gqqu.SetQueryOfID(*id)
	}
	return gqqu
}

// SetQueryOf sets the "query_of" edge to the Project entity.
func (gqqu *GraphQLQueryUpdate) SetQueryOf(p *Project) *GraphQLQueryUpdate {
	return gqqu.SetQueryOfID(p.ID)
}

// Mutation returns the GraphQLQueryMutation object of the builder.
func (gqqu *GraphQLQueryUpdate) Mutation() *GraphQLQueryMutation {
	return gqqu.mutation
}

// ClearQueryOf clears the "query_of" edge to the Project entity.
func (gqqu *GraphQLQueryUpdate) ClearQueryOf() *GraphQLQueryUpdate {
	gqqu.mutation.ClearQueryOf()
	return gqqu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gqqu *GraphQLQueryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	gqqu.defaults()
	if len(gqqu.hooks) == 0 {
		affected, err = gqqu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GraphQLQueryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gqqu.mutation = mutation
			affected, err = gqqu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gqqu.hooks) - 1; i >= 0; i-- {
			mut = gqqu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gqqu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gqqu *GraphQLQueryUpdate) SaveX(ctx context.Context) int {
	affected, err := gqqu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gqqu *GraphQLQueryUpdate) Exec(ctx context.Context) error {
	_, err := gqqu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gqqu *GraphQLQueryUpdate) ExecX(ctx context.Context) {
	if err := gqqu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gqqu *GraphQLQueryUpdate) defaults() {
	if _, ok := gqqu.mutation.UpdatedAt(); !ok {
		v := graphqlquery.UpdateDefaultUpdatedAt()
		gqqu.mutation.SetUpdatedAt(v)
	}
}

func (gqqu *GraphQLQueryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   graphqlquery.Table,
			Columns: graphqlquery.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: graphqlquery.FieldID,
			},
		},
	}
	if ps := gqqu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gqqu.mutation.VariableName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: graphqlquery.FieldVariableName,
		})
	}
	if value, ok := gqqu.mutation.GqlAst(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: graphqlquery.FieldGqlAst,
		})
	}
	if value, ok := gqqu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: graphqlquery.FieldUpdatedAt,
		})
	}
	if gqqu.mutation.QueryOfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   graphqlquery.QueryOfTable,
			Columns: []string{graphqlquery.QueryOfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gqqu.mutation.QueryOfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   graphqlquery.QueryOfTable,
			Columns: []string{graphqlquery.QueryOfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gqqu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{graphqlquery.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// GraphQLQueryUpdateOne is the builder for updating a single GraphQLQuery entity.
type GraphQLQueryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GraphQLQueryMutation
}

// SetVariableName sets the "variable_name" field.
func (gqquo *GraphQLQueryUpdateOne) SetVariableName(s string) *GraphQLQueryUpdateOne {
	gqquo.mutation.SetVariableName(s)
	return gqquo
}

// SetGqlAst sets the "gql_ast" field.
func (gqquo *GraphQLQueryUpdateOne) SetGqlAst(s string) *GraphQLQueryUpdateOne {
	gqquo.mutation.SetGqlAst(s)
	return gqquo
}

// SetUpdatedAt sets the "updated_at" field.
func (gqquo *GraphQLQueryUpdateOne) SetUpdatedAt(t time.Time) *GraphQLQueryUpdateOne {
	gqquo.mutation.SetUpdatedAt(t)
	return gqquo
}

// SetQueryOfID sets the "query_of" edge to the Project entity by ID.
func (gqquo *GraphQLQueryUpdateOne) SetQueryOfID(id uuid.UUID) *GraphQLQueryUpdateOne {
	gqquo.mutation.SetQueryOfID(id)
	return gqquo
}

// SetNillableQueryOfID sets the "query_of" edge to the Project entity by ID if the given value is not nil.
func (gqquo *GraphQLQueryUpdateOne) SetNillableQueryOfID(id *uuid.UUID) *GraphQLQueryUpdateOne {
	if id != nil {
		gqquo = gqquo.SetQueryOfID(*id)
	}
	return gqquo
}

// SetQueryOf sets the "query_of" edge to the Project entity.
func (gqquo *GraphQLQueryUpdateOne) SetQueryOf(p *Project) *GraphQLQueryUpdateOne {
	return gqquo.SetQueryOfID(p.ID)
}

// Mutation returns the GraphQLQueryMutation object of the builder.
func (gqquo *GraphQLQueryUpdateOne) Mutation() *GraphQLQueryMutation {
	return gqquo.mutation
}

// ClearQueryOf clears the "query_of" edge to the Project entity.
func (gqquo *GraphQLQueryUpdateOne) ClearQueryOf() *GraphQLQueryUpdateOne {
	gqquo.mutation.ClearQueryOf()
	return gqquo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gqquo *GraphQLQueryUpdateOne) Select(field string, fields ...string) *GraphQLQueryUpdateOne {
	gqquo.fields = append([]string{field}, fields...)
	return gqquo
}

// Save executes the query and returns the updated GraphQLQuery entity.
func (gqquo *GraphQLQueryUpdateOne) Save(ctx context.Context) (*GraphQLQuery, error) {
	var (
		err  error
		node *GraphQLQuery
	)
	gqquo.defaults()
	if len(gqquo.hooks) == 0 {
		node, err = gqquo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GraphQLQueryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gqquo.mutation = mutation
			node, err = gqquo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gqquo.hooks) - 1; i >= 0; i-- {
			mut = gqquo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gqquo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gqquo *GraphQLQueryUpdateOne) SaveX(ctx context.Context) *GraphQLQuery {
	node, err := gqquo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gqquo *GraphQLQueryUpdateOne) Exec(ctx context.Context) error {
	_, err := gqquo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gqquo *GraphQLQueryUpdateOne) ExecX(ctx context.Context) {
	if err := gqquo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gqquo *GraphQLQueryUpdateOne) defaults() {
	if _, ok := gqquo.mutation.UpdatedAt(); !ok {
		v := graphqlquery.UpdateDefaultUpdatedAt()
		gqquo.mutation.SetUpdatedAt(v)
	}
}

func (gqquo *GraphQLQueryUpdateOne) sqlSave(ctx context.Context) (_node *GraphQLQuery, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   graphqlquery.Table,
			Columns: graphqlquery.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: graphqlquery.FieldID,
			},
		},
	}
	id, ok := gqquo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing GraphQLQuery.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := gqquo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, graphqlquery.FieldID)
		for _, f := range fields {
			if !graphqlquery.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != graphqlquery.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gqquo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gqquo.mutation.VariableName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: graphqlquery.FieldVariableName,
		})
	}
	if value, ok := gqquo.mutation.GqlAst(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: graphqlquery.FieldGqlAst,
		})
	}
	if value, ok := gqquo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: graphqlquery.FieldUpdatedAt,
		})
	}
	if gqquo.mutation.QueryOfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   graphqlquery.QueryOfTable,
			Columns: []string{graphqlquery.QueryOfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gqquo.mutation.QueryOfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   graphqlquery.QueryOfTable,
			Columns: []string{graphqlquery.QueryOfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GraphQLQuery{config: gqquo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gqquo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{graphqlquery.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
