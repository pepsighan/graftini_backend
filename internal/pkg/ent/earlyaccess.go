// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/pepsighan/graftini_backend/internal/pkg/ent/earlyaccess"
)

// EarlyAccess is the model entity for the EarlyAccess schema.
type EarlyAccess struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EarlyAccess) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case earlyaccess.FieldID:
			values[i] = new(sql.NullInt64)
		case earlyaccess.FieldEmail:
			values[i] = new(sql.NullString)
		case earlyaccess.FieldCreatedAt, earlyaccess.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EarlyAccess", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EarlyAccess fields.
func (ea *EarlyAccess) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case earlyaccess.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ea.ID = int(value.Int64)
		case earlyaccess.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				ea.Email = value.String
			}
		case earlyaccess.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ea.CreatedAt = value.Time
			}
		case earlyaccess.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ea.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this EarlyAccess.
// Note that you need to call EarlyAccess.Unwrap() before calling this method if this EarlyAccess
// was returned from a transaction, and the transaction was committed or rolled back.
func (ea *EarlyAccess) Update() *EarlyAccessUpdateOne {
	return (&EarlyAccessClient{config: ea.config}).UpdateOne(ea)
}

// Unwrap unwraps the EarlyAccess entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ea *EarlyAccess) Unwrap() *EarlyAccess {
	tx, ok := ea.config.driver.(*txDriver)
	if !ok {
		panic("ent: EarlyAccess is not a transactional entity")
	}
	ea.config.driver = tx.drv
	return ea
}

// String implements the fmt.Stringer.
func (ea *EarlyAccess) String() string {
	var builder strings.Builder
	builder.WriteString("EarlyAccess(")
	builder.WriteString(fmt.Sprintf("id=%v", ea.ID))
	builder.WriteString(", email=")
	builder.WriteString(ea.Email)
	builder.WriteString(", created_at=")
	builder.WriteString(ea.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ea.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// EarlyAccesses is a parsable slice of EarlyAccess.
type EarlyAccesses []*EarlyAccess

func (ea EarlyAccesses) config(cfg config) {
	for _i := range ea {
		ea[_i].config = cfg
	}
}
