// Code generated by entc, DO NOT EDIT.

package graphqlquery

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/pepsighan/graftini_backend/internal/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// VariableName applies equality check predicate on the "variable_name" field. It's identical to VariableNameEQ.
func VariableName(v string) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVariableName), v))
	})
}

// GqlAst applies equality check predicate on the "gql_ast" field. It's identical to GqlAstEQ.
func GqlAst(v string) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGqlAst), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// VariableNameEQ applies the EQ predicate on the "variable_name" field.
func VariableNameEQ(v string) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVariableName), v))
	})
}

// VariableNameNEQ applies the NEQ predicate on the "variable_name" field.
func VariableNameNEQ(v string) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVariableName), v))
	})
}

// VariableNameIn applies the In predicate on the "variable_name" field.
func VariableNameIn(vs ...string) predicate.GraphQLQuery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVariableName), v...))
	})
}

// VariableNameNotIn applies the NotIn predicate on the "variable_name" field.
func VariableNameNotIn(vs ...string) predicate.GraphQLQuery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVariableName), v...))
	})
}

// VariableNameGT applies the GT predicate on the "variable_name" field.
func VariableNameGT(v string) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVariableName), v))
	})
}

// VariableNameGTE applies the GTE predicate on the "variable_name" field.
func VariableNameGTE(v string) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVariableName), v))
	})
}

// VariableNameLT applies the LT predicate on the "variable_name" field.
func VariableNameLT(v string) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVariableName), v))
	})
}

// VariableNameLTE applies the LTE predicate on the "variable_name" field.
func VariableNameLTE(v string) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVariableName), v))
	})
}

// VariableNameContains applies the Contains predicate on the "variable_name" field.
func VariableNameContains(v string) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVariableName), v))
	})
}

// VariableNameHasPrefix applies the HasPrefix predicate on the "variable_name" field.
func VariableNameHasPrefix(v string) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVariableName), v))
	})
}

// VariableNameHasSuffix applies the HasSuffix predicate on the "variable_name" field.
func VariableNameHasSuffix(v string) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVariableName), v))
	})
}

// VariableNameEqualFold applies the EqualFold predicate on the "variable_name" field.
func VariableNameEqualFold(v string) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVariableName), v))
	})
}

// VariableNameContainsFold applies the ContainsFold predicate on the "variable_name" field.
func VariableNameContainsFold(v string) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVariableName), v))
	})
}

// GqlAstEQ applies the EQ predicate on the "gql_ast" field.
func GqlAstEQ(v string) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGqlAst), v))
	})
}

// GqlAstNEQ applies the NEQ predicate on the "gql_ast" field.
func GqlAstNEQ(v string) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGqlAst), v))
	})
}

// GqlAstIn applies the In predicate on the "gql_ast" field.
func GqlAstIn(vs ...string) predicate.GraphQLQuery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGqlAst), v...))
	})
}

// GqlAstNotIn applies the NotIn predicate on the "gql_ast" field.
func GqlAstNotIn(vs ...string) predicate.GraphQLQuery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGqlAst), v...))
	})
}

// GqlAstGT applies the GT predicate on the "gql_ast" field.
func GqlAstGT(v string) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGqlAst), v))
	})
}

// GqlAstGTE applies the GTE predicate on the "gql_ast" field.
func GqlAstGTE(v string) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGqlAst), v))
	})
}

// GqlAstLT applies the LT predicate on the "gql_ast" field.
func GqlAstLT(v string) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGqlAst), v))
	})
}

// GqlAstLTE applies the LTE predicate on the "gql_ast" field.
func GqlAstLTE(v string) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGqlAst), v))
	})
}

// GqlAstContains applies the Contains predicate on the "gql_ast" field.
func GqlAstContains(v string) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGqlAst), v))
	})
}

// GqlAstHasPrefix applies the HasPrefix predicate on the "gql_ast" field.
func GqlAstHasPrefix(v string) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGqlAst), v))
	})
}

// GqlAstHasSuffix applies the HasSuffix predicate on the "gql_ast" field.
func GqlAstHasSuffix(v string) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGqlAst), v))
	})
}

// GqlAstEqualFold applies the EqualFold predicate on the "gql_ast" field.
func GqlAstEqualFold(v string) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGqlAst), v))
	})
}

// GqlAstContainsFold applies the ContainsFold predicate on the "gql_ast" field.
func GqlAstContainsFold(v string) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGqlAst), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GraphQLQuery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GraphQLQuery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.GraphQLQuery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.GraphQLQuery {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasQueryOf applies the HasEdge predicate on the "query_of" edge.
func HasQueryOf() predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QueryOfTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QueryOfTable, QueryOfColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQueryOfWith applies the HasEdge predicate on the "query_of" edge with a given conditions (other predicates).
func HasQueryOfWith(preds ...predicate.Project) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QueryOfInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QueryOfTable, QueryOfColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GraphQLQuery) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GraphQLQuery) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GraphQLQuery) predicate.GraphQLQuery {
	return predicate.GraphQLQuery(func(s *sql.Selector) {
		p(s.Not())
	})
}
