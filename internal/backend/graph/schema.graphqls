# --------------------------------------
# Directives are written below.
# --------------------------------------

"""
This directive only allows request to pass through if it is authenticated. Also, it inserts
the authenticated user into the request context.
"""
directive @isAuthenticated on FIELD_DEFINITION

# --------------------------------------
# Scalar values are declared below.
# --------------------------------------

"""
Upload represents an uploaded file.
"""
scalar Upload

"""
Represents date and time.
"""
scalar Time

# --------------------------------------
# Queries are written below.
# --------------------------------------

type User {
  id: ID!
  firebaseUID: String!
  firstName: String
  lastName: String
  email: String!
}

type Project {
  id: ID!
  name: String!
  graphqlEndpoint: String
  pages: [Page!]!
  queries: [GraphQLQuery!]!
  appUrl: String
}

type Page {
  id: ID!
  name: String!
  route: String!
  componentMap: String!
}

type Deployment {
  id: ID!
  status: String!
  createdAt: Time!
  updatedAt: Time!
}

type GraphQLQuery {
  id: ID!
  variableName: String!
  gqlAst: String!
}

type File {
  id: ID!
  mimeType: String!
  fileUrl: String!
}

type Template {
  id: ID!
  name: String!
  snapshot: String!
}

type Query {
  """
  The currently logged in user if the request is authenticated. It will return
  null if not authenticated.
  """
  me: User
  """
  Lists all the projects of the logged in user.
  """
  myProjects: [Project!]! @isAuthenticated
  """
  Gets the project by ID for the logged in user.
  """
  myProject(id: ID!): Project! @isAuthenticated
  """
  Gets the last deployment for the given project.
  """
  myLastDeployment(projectId: ID!): Deployment @isAuthenticated
  """
  Gets the file pointed by the ID.
  """
  file(fileId: ID!): File! @isAuthenticated
  """
  Get the templates.
  """
  templates: [Template!]! @isAuthenticated
}

# --------------------------------------
# Mutations are written below.
# --------------------------------------

input NewProject {
  name: String!
  defaultPageComponentMap: String!
  templateId: ID
}

input UpdateProject {
  id: ID!
  name: String!
  graphqlEndpoint: String
}

input UpdateProjectDesign {
  projectId: ID!
  pages: [UpdatePageDesign!]!
}

input UpdatePageDesign {
  pageId: ID!
  componentMap: String!
}

input NewPage {
  projectId: ID!
  name: String!
  route: String!
  componentMap: String!
}

input DuplicatePage {
  projectId: ID!
  name: String!
  route: String!
  copyPageId: ID!
}

input UpdatePage {
  projectId: ID!
  pageId: ID!
  name: String!
  route: String!
}

input NewGraphQLQuery {
  projectId: ID!
  variableName: String!
  gqlAst: String!
}

input ContactUsMessage {
  name: String!
  email: String!
  content: String!
}

type Mutation {
  """
  Creates a new project for the logged in user. It will also create a default page
  with the project.
  """
  createProject(input: NewProject!): Project! @isAuthenticated
  """
  Update the project of the logged in user.
  """
  updateProject(input: UpdateProject!): Project! @isAuthenticated
  """
  Deletes the project of the logged in user.
  """
  deleteProject(projectId: ID!): Project! @isAuthenticated
  """
  Deploy the project.
  """
  deployProject(projectId: ID!): Deployment! @isAuthenticated
  """
  Update the designs of the pages in a project.
  """
  updateProjectDesign(input: UpdateProjectDesign!): Project! @isAuthenticated
  """
  Create a page on an existing project for the logged in user.
  """
  createPage(input: NewPage!): Page! @isAuthenticated
  """
  Creates a new page using an existing page for reference.
  """
  duplicatePage(input: DuplicatePage!): Page! @isAuthenticated
  """
  Updates an existing page.
  """
  updatePage(input: UpdatePage!): Page! @isAuthenticated
  """
  Delete a page on an existing project for the logged in user. It does not
  however delete if it is the last page of the project. In that case, it
  will throw error.
  """
  deletePage(projectId: ID!, pageId: ID!): Page! @isAuthenticated
  """
  Create a new query for a given project.
  """
  createQuery(input: NewGraphQLQuery!): GraphQLQuery! @isAuthenticated
  """
  Delete a query from a project.
  """
  deleteQuery(projectId: ID!, queryId: ID!): GraphQLQuery! @isAuthenticated
  """
  Upload a file. Only image files are supported. Images of type JPEG, PNG, WebP.
  """
  uploadFile(file: Upload!): File! @isAuthenticated
  """
  Is the email allowed for early access.
  """
  isEarlyAccessAllowed(email: String!): Boolean!
  """
  To allow users to send a message to us from the app.
  """
  contactUs(input: ContactUsMessage!): Time!
}
