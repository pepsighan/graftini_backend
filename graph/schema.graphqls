# --------------------------------------
# Directives are written below.
# --------------------------------------

"""
This directive only allows request to pass through if it is authenticated. Also, it inserts
the authenticated user into the request context.
"""
directive @isAuthenticated on FIELD_DEFINITION

# --------------------------------------
# Queries are written below.
# --------------------------------------

type User {
  id: ID!
  firebaseUID: String!
  firstName: String
  lastName: String
  email: String!
}

type Project {
  id: ID!
  name: String!
  graphqlEndpoint: String
  pages: [Page!]!
}

type Page {
  id: ID!
  name: String!
  route: String!
}

type Query {
  """
  The currently logged in user if the request is authenticated. It will return
  null if not authenticated.
  """
  me: User
  """
  Lists all the projects of the logged in user.
  """
  myProjects: [Project!]!
  """
  Gets the project by ID for the logged in user.
  """
  myProject(id: ID!): Project!
}

# --------------------------------------
# Mutations are written below.
# --------------------------------------

input NewProject {
  name: String!
}

input UpdateProject {
  id: ID!
  name: String!
  graphqlEndpoint: String
}

input NewPage {
  projectId: ID!
  name: String!
  route: String!
}

type Mutation {
  """
  Creates a new project for the logged in user. It will also create a default page
  with the project.
  """
  createProject(input: NewProject!): Project!
  """
  Update the project of the logged in user.
  """
  updateProject(input: UpdateProject!): Project!
  """
  Create a page on an existing project for the logged in user.
  """
  createPage(input: NewPage!): Page!
  """
  Delete a page on an existing project for the logged in user. It does not
  however delete if it is the last page of the project. In that case, it
  will throw error.
  """
  deletePage(projectId: ID!, pageId: ID!): Page!
}
